"use client";

import { type ReactNode, useEffect, useMemo, useState } from "react";
import { type DailyCall } from "@daily-co/daily-js";
import { TooltipProvider } from "@radix-ui/react-tooltip";

import useLocalStorage from "@/hooks/useLocalStorage";
import type { UserObject } from "@/app/(primaryApp)/app/server/[serverId]/appHooks/types";
import { redirect } from "next/navigation";
import styles from "./page.module.scss";

declare global {
  interface Window {
    callObj: DailyCall;
  }
}

function App(): ReactNode {
  const localData = useLocalStorage();
  const recentServers = localData.get("recentServers");
  const [userObject, setUserObject] = useState(localData.get("user"));
  const [changingUser, setChangingUser] = useState(false);
  const [newUsername, setNewUsername] = useState("");
  const [newAvatarURL, setNewAvatarURL] = useState("");

  const [joinServerId, setJoinServerId] = useState("");
  const [serverJoinError, setServerJoinError] = useState<string | null>(null);
  const [isJoining, setIsJoining] = useState(false);

  const [version, setVersion] = useState("Finalising initialisation...");

  const newUsernameInvalid = useMemo(
    () =>
      newUsername.length < 2 ||
      newUsername.length > 24 ||
      /[^a-zA-Z0-9_ ]/.test(newUsername),
    [newUsername],
  );

  const [useVnlSkin] = useState(localData.get("useVnlSkin") ?? false);

  useEffect(() => {
    if (useVnlSkin) document.body.classList.add("vnlSkin");
    else document.body.classList.remove("vnlSkin");
  }, [useVnlSkin]);

  // Get version info
  useEffect(() => {
    (async () => {
      setVersion("v" + (await window.app.getAppVersionAsync()));
    })();
  }, []);

  async function joinServer(id: string) {
    setIsJoining(true);

    const serverDataReq = await fetch("/api/servers/" + id);
    if (!serverDataReq.ok) {
      setIsJoining(false);
      return setServerJoinError("That server ID is invalid or does not exist.");
    }

    const newRecentServers = [
      await serverDataReq.json(),
      ...(recentServers ?? []).filter((x) => x.slug !== id),
    ].slice(0, 3);
    localData.set("recentServers", newRecentServers);

    redirect("/app/server/" + id);
  }

  if (!userObject || changingUser) {
    return (
      <div className={styles.mainLayout}>
        <div className={styles.splitLayout}>
          <div>
            {!changingUser && (
              <>
                <h1 className={styles.heroAppTitle}>Citizen Band</h1>
                <p style={{ marginTop: -12, marginBottom: 12 }}>
                  Let&apos;s set up your profile.
                </p>
              </>
            )}

            {changingUser && (
              <h1 className={styles.heroAppTitle}>Change Profile</h1>
            )}

            <form
              className={styles.setupForm}
              onSubmit={(e) => {
                e.preventDefault();

                if (!newUsernameInvalid) {
                  const newUser: UserObject = {
                    username: newUsername,
                    avatar: newAvatarURL,
                  };

                  setUserObject(newUser);
                  localData.set("user", newUser);

                  setChangingUser(false);
                }
              }}
            >
              <div
                className={`${styles.inputField} ${newUsernameInvalid && newUsername.length > 1 ? styles.invalid : ""}`.trim()}
              >
                <label htmlFor="username">Username</label>
                <input
                  type="text"
                  id="username"
                  value={newUsername}
                  onInput={(e) =>
                    setNewUsername((e.target as HTMLInputElement).value)
                  }
                />
                <p className={styles.hint}>
                  Letters, numbers, underscores, and spaces only. Must be
                  between 2 and 24 characters.
                </p>
              </div>

              <div className={styles.inputField}>
                <label htmlFor="avatarUrl">Avatar URL</label>
                <input
                  type="text"
                  id="avatarUrl"
                  value={newAvatarURL}
                  onInput={(e) =>
                    setNewAvatarURL((e.target as HTMLInputElement).value)
                  }
                />
                <p className={styles.hint}>
                  Optional. Avoid using Discord image links as they expire after
                  a day. Using avatars from Steam or another similar application
                  works better.
                </p>
              </div>

              <div className={styles.flex}>
                <button
                  className={styles.button}
                  type="submit"
                  disabled={newUsernameInvalid}
                >
                  Save
                </button>
              </div>
            </form>
          </div>

          <div>
            <div style={{ marginTop: changingUser ? 55 : 107 }}>
              <h2 className={styles.heroSectionTitle}>Profile preview</h2>
              <p className={styles.mutedText} style={{ marginBottom: 8 }}>
                This is how other people will see you.
              </p>

              <div className={styles.participantMock}>
                <div
                  style={{ "--src": `url("${newAvatarURL}")` }}
                  className={styles.avatar}
                />
                <p>{newUsername || "Username"}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <TooltipProvider>
      <div className={styles.mainLayout}>
        <div>
          <svg
            height="40"
            viewBox="0 0 133 30"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M41.11 20.14C40.1953 20.14 39.4113 19.93 38.758 19.51C38.1047 19.0853 37.603 18.4833 37.253 17.704C36.9077 16.92 36.735 15.982 36.735 14.89C36.735 13.8027 36.9077 12.8763 37.253 12.111C37.5983 11.341 38.0977 10.753 38.751 10.347C39.4043 9.941 40.1907 9.738 41.11 9.738C41.838 9.738 42.4843 9.88733 43.049 10.186C43.6137 10.4847 44.0663 10.886 44.407 11.39C44.7523 11.894 44.9577 12.4517 45.023 13.063H43.427C43.357 12.6803 43.2217 12.335 43.021 12.027C42.825 11.7143 42.5637 11.4693 42.237 11.292C41.9103 11.11 41.523 11.019 41.075 11.019C40.501 11.019 40.0133 11.1543 39.612 11.425C39.2107 11.6957 38.905 12.118 38.695 12.692C38.4897 13.266 38.387 14.0057 38.387 14.911C38.387 16.2783 38.618 17.2793 39.08 17.914C39.542 18.544 40.207 18.859 41.075 18.859C41.523 18.859 41.9103 18.7633 42.237 18.572C42.5637 18.376 42.825 18.117 43.021 17.795C43.2217 17.4683 43.357 17.1137 43.427 16.731H45.023C44.967 17.1743 44.8503 17.6013 44.673 18.012C44.4957 18.418 44.2483 18.782 43.931 19.104C43.6183 19.426 43.2287 19.6803 42.762 19.867C42.2953 20.049 41.7447 20.14 41.11 20.14ZM46.798 20V12.762H48.24V20H46.798ZM46.763 11.362V9.885H48.268V11.362H46.763ZM53.0831 20.049C52.5464 20.049 52.1311 19.9767 51.8371 19.832C51.5431 19.6873 51.3377 19.4797 51.2211 19.209C51.1044 18.9337 51.0461 18.6023 51.0461 18.215V13.84H49.8701V12.762H51.0951L51.4591 10.634H52.5511V12.755H54.1751V13.84H52.5511L52.5581 18.159C52.5581 18.397 52.5814 18.572 52.6281 18.684C52.6794 18.7913 52.7634 18.8613 52.8801 18.894C53.0014 18.922 53.1647 18.936 53.3701 18.936H54.2101V19.909C54.1214 19.9463 53.9837 19.979 53.7971 20.007C53.6151 20.035 53.3771 20.049 53.0831 20.049ZM55.8898 20V12.762H57.3318V20H55.8898ZM55.8548 11.362V9.885H57.3598V11.362H55.8548ZM58.8919 20V19.104L62.8329 13.847H59.0669V12.762H64.6319V13.658L60.6839 18.915H64.6599V20H58.8919ZM69.2721 20.14C68.5861 20.14 67.9818 19.993 67.4591 19.699C66.9364 19.4003 66.5281 18.9757 66.2341 18.425C65.9448 17.8743 65.8001 17.2187 65.8001 16.458C65.8001 15.7067 65.9331 15.044 66.1991 14.47C66.4651 13.8913 66.8501 13.4387 67.3541 13.112C67.8581 12.7853 68.4648 12.622 69.1741 12.622C69.8694 12.622 70.4574 12.7713 70.9381 13.07C71.4188 13.3687 71.7828 13.7887 72.0301 14.33C72.2774 14.8667 72.4011 15.5013 72.4011 16.234V16.731H67.3051C67.3004 17.165 67.3704 17.5547 67.5151 17.9C67.6598 18.2407 67.8744 18.5113 68.1591 18.712C68.4484 18.908 68.8078 19.006 69.2371 19.006C69.6711 19.006 70.0444 18.908 70.3571 18.712C70.6744 18.516 70.8821 18.2243 70.9801 17.837H72.3661C72.2821 18.3317 72.0838 18.7517 71.7711 19.097C71.4584 19.4423 71.0828 19.7037 70.6441 19.881C70.2054 20.0537 69.7481 20.14 69.2721 20.14ZM67.3051 15.758H70.9731C70.9731 15.38 70.9078 15.037 70.7771 14.729C70.6464 14.4163 70.4458 14.1713 70.1751 13.994C69.9091 13.812 69.5731 13.721 69.1671 13.721C68.7518 13.721 68.4064 13.8213 68.1311 14.022C67.8558 14.2227 67.6481 14.4793 67.5081 14.792C67.3728 15.1047 67.3051 15.4267 67.3051 15.758ZM74.1068 20V12.762H75.5698V13.805C75.6865 13.609 75.8428 13.4247 76.0388 13.252C76.2395 13.0793 76.4845 12.9393 76.7738 12.832C77.0678 12.7247 77.4061 12.671 77.7888 12.671C78.2415 12.671 78.6591 12.762 79.0418 12.944C79.4291 13.1213 79.7395 13.4013 79.9728 13.784C80.2061 14.162 80.3228 14.652 80.3228 15.254V20H78.8248V15.415C78.8248 14.897 78.6848 14.512 78.4048 14.26C78.1295 14.008 77.7725 13.882 77.3338 13.882C77.0398 13.882 76.7598 13.931 76.4938 14.029C76.2278 14.127 76.0131 14.2763 75.8498 14.477C75.6865 14.673 75.6048 14.9203 75.6048 15.219V20H74.1068ZM85.8435 20V9.878H89.2105C90.4658 9.878 91.4108 10.1043 92.0455 10.557C92.6848 11.0097 93.0045 11.663 93.0045 12.517C93.0045 13.0443 92.8668 13.4993 92.5915 13.882C92.3208 14.26 91.8448 14.5773 91.1635 14.834C91.5648 14.9227 91.9008 15.051 92.1715 15.219C92.4422 15.3823 92.6545 15.5713 92.8085 15.786C92.9672 16.0007 93.0792 16.234 93.1445 16.486C93.2145 16.738 93.2495 16.9993 93.2495 17.27C93.2495 18.1893 92.9252 18.8753 92.2765 19.328C91.6325 19.776 90.6502 20 89.3295 20H85.8435ZM87.3415 18.782H89.3365C90.1205 18.782 90.7155 18.649 91.1215 18.383C91.5275 18.1123 91.7305 17.7087 91.7305 17.172C91.7305 16.7847 91.6302 16.4673 91.4295 16.22C91.2288 15.9727 90.9582 15.7907 90.6175 15.674C90.2768 15.5573 89.8965 15.499 89.4765 15.499H87.3415V18.782ZM87.3415 14.26H89.4765C89.7285 14.26 89.9758 14.2343 90.2185 14.183C90.4612 14.1317 90.6828 14.0477 90.8835 13.931C91.0842 13.8097 91.2452 13.6487 91.3665 13.448C91.4878 13.2473 91.5485 13.0023 91.5485 12.713C91.5485 12.1623 91.3408 11.754 90.9255 11.488C90.5102 11.222 89.9712 11.089 89.3085 11.089H87.3415V14.26ZM97.0761 20.14C96.6094 20.14 96.1941 20.056 95.8301 19.888C95.4708 19.72 95.1884 19.4773 94.9831 19.16C94.7778 18.8427 94.6751 18.46 94.6751 18.012C94.6751 17.2093 94.9574 16.6097 95.5221 16.213C96.0914 15.8163 97.0014 15.6063 98.2521 15.583L99.4421 15.548V15.023C99.4421 14.6077 99.3184 14.281 99.0711 14.043C98.8238 13.805 98.4411 13.6883 97.9231 13.693C97.5404 13.693 97.1974 13.7817 96.8941 13.959C96.5908 14.1363 96.3924 14.428 96.2991 14.834H95.0041C95.0321 14.3533 95.1698 13.9497 95.4171 13.623C95.6691 13.2917 96.0144 13.042 96.4531 12.874C96.8918 12.706 97.4051 12.622 97.9931 12.622C98.6558 12.622 99.1994 12.713 99.6241 12.895C100.049 13.0723 100.364 13.3337 100.569 13.679C100.779 14.0243 100.884 14.4443 100.884 14.939V20H99.6101L99.4981 18.67C99.2274 19.2253 98.8844 19.6103 98.4691 19.825C98.0538 20.035 97.5894 20.14 97.0761 20.14ZM97.5451 19.097C97.7738 19.097 98.0001 19.0573 98.2241 18.978C98.4481 18.894 98.6511 18.782 98.8331 18.642C99.0151 18.4973 99.1598 18.3363 99.2671 18.159C99.3791 17.9817 99.4374 17.7997 99.4421 17.613V16.416L98.4621 16.437C97.9628 16.4417 97.5381 16.493 97.1881 16.591C96.8428 16.689 96.5768 16.8407 96.3901 17.046C96.2081 17.2513 96.1171 17.5243 96.1171 17.865C96.1171 18.2523 96.2501 18.5557 96.5161 18.775C96.7868 18.9897 97.1298 19.097 97.5451 19.097ZM102.804 20V12.762H104.267V13.805C104.384 13.609 104.54 13.4247 104.736 13.252C104.937 13.0793 105.182 12.9393 105.471 12.832C105.765 12.7247 106.103 12.671 106.486 12.671C106.939 12.671 107.356 12.762 107.739 12.944C108.126 13.1213 108.437 13.4013 108.67 13.784C108.903 14.162 109.02 14.652 109.02 15.254V20H107.522V15.415C107.522 14.897 107.382 14.512 107.102 14.26C106.827 14.008 106.47 13.882 106.031 13.882C105.737 13.882 105.457 13.931 105.191 14.029C104.925 14.127 104.71 14.2763 104.547 14.477C104.384 14.673 104.302 14.9203 104.302 15.219V20H102.804ZM113.606 20.14C112.658 20.14 111.909 19.8157 111.359 19.167C110.813 18.5137 110.54 17.5733 110.54 16.346C110.54 15.5947 110.649 14.9413 110.869 14.386C111.093 13.826 111.422 13.392 111.856 13.084C112.29 12.776 112.831 12.622 113.48 12.622C113.802 12.622 114.091 12.6617 114.348 12.741C114.604 12.8203 114.828 12.923 115.02 13.049C115.211 13.175 115.372 13.3103 115.503 13.455C115.633 13.5997 115.731 13.735 115.797 13.861V9.598H117.309V20H116.182L116.014 18.516C115.962 18.6747 115.883 18.8473 115.776 19.034C115.673 19.2207 115.528 19.398 115.342 19.566C115.16 19.734 114.926 19.8717 114.642 19.979C114.357 20.0863 114.012 20.14 113.606 20.14ZM113.893 19.013C114.565 19.013 115.05 18.803 115.349 18.383C115.647 17.9583 115.797 17.263 115.797 16.297C115.792 15.751 115.724 15.289 115.594 14.911C115.468 14.533 115.267 14.2483 114.992 14.057C114.721 13.861 114.364 13.763 113.921 13.763C113.365 13.763 112.91 13.9637 112.556 14.365C112.206 14.7617 112.031 15.4057 112.031 16.297C112.031 17.1743 112.189 17.8463 112.507 18.313C112.829 18.7797 113.291 19.013 113.893 19.013Z"
              fill="white"
            />
            <rect x="3" y="4" width="24" height="22" fill="#4D94FF" />
            <path
              d="M15 0C18.7492 0 21.7226 0.156636 23.9473 0.345703C27.0471 0.609245 29.3908 2.95286 29.6543 6.05273C29.8434 8.27742 30 11.2508 30 15C30 18.7492 29.8434 21.7226 29.6543 23.9473C29.3908 27.0471 27.0471 29.3908 23.9473 29.6543C21.7226 29.8434 18.7492 30 15 30C11.2508 30 8.27742 29.8434 6.05273 29.6543C2.95286 29.3908 0.609246 27.0471 0.345703 23.9473C0.156636 21.7226 0 18.7492 0 15C0 11.2508 0.156636 8.27742 0.345703 6.05273C0.609245 2.95286 2.95286 0.609246 6.05273 0.345703C8.27742 0.156636 11.2508 0 15 0ZM7.33887 20.7227C7.21039 20.7227 7.08046 20.7692 6.97852 20.8525L5.76172 21.8467C5.51082 22.052 5.51626 22.3996 5.81738 22.4609C5.94418 22.4867 6.07807 22.5 6.2168 22.5H13.001C13.1145 22.4999 13.198 22.3897 13.166 22.2939L12.7295 20.9912C12.6747 20.8281 12.514 20.7227 12.3203 20.7227H7.33887ZM18 20.7227C17.8715 20.7227 17.7416 20.7692 17.6396 20.8525L16.4229 21.8467C16.1719 22.052 16.1774 22.3996 16.4785 22.4609C16.6053 22.4867 16.7392 22.5 16.8779 22.5H23.6621C23.7757 22.4998 23.8582 22.3897 23.8262 22.2939L23.3906 20.9912C23.3358 20.8281 23.1751 20.7227 22.9814 20.7227H18ZM25.3516 14.9443C25.2231 14.9443 25.0931 14.991 24.9912 15.0742L24.7656 15.2588C24.6638 15.3421 24.5977 15.4555 24.582 15.5732L24.0771 19.376C24.0452 19.6164 24.0669 19.8542 24.1406 20.0752L24.667 21.6533C24.7545 21.9148 25.1034 22.0031 25.3184 21.7744C25.5948 21.4802 25.7844 21.1169 25.8369 20.7227L26.4893 15.8086C26.5144 15.6189 26.4924 15.3978 26.4434 15.1982C26.4042 15.0392 26.246 14.9444 26.0625 14.9443H25.3516ZM5.82422 14.9443C5.64063 14.9443 5.45641 15.0392 5.375 15.1982C5.27289 15.3978 5.19224 15.6189 5.16699 15.8086L4.51465 20.7227C4.49784 20.8493 4.49577 20.9728 4.50781 21.0918C4.53665 21.3756 4.90892 21.423 5.16016 21.2178L6.37695 20.2236C6.47884 20.1403 6.54489 20.027 6.56055 19.9092L7.13672 15.5732C7.15237 15.4555 7.11675 15.3421 7.03711 15.2588L6.86035 15.0742C6.78057 14.991 6.66352 14.9444 6.53516 14.9443H5.82422ZM16.4854 14.9443C16.3018 14.9443 16.1175 15.0392 16.0361 15.1982C15.934 15.3978 15.8534 15.6189 15.8281 15.8086L15.1758 20.7227C15.159 20.8493 15.1569 20.9728 15.1689 21.0918C15.1978 21.3756 15.5701 21.423 15.8213 21.2178L17.0381 20.2236C17.14 20.1403 17.206 20.027 17.2217 19.9092L17.7979 15.5732C17.8135 15.4555 17.7779 15.3421 17.6982 15.2588L17.5215 15.0742C17.4417 14.991 17.3246 14.9444 17.1963 14.9443H16.4854ZM19.2285 13.6113C19.1 13.6113 18.9701 13.6579 18.8682 13.7412L18.3252 14.1855C18.1129 14.3591 18.0751 14.6409 18.2412 14.8145L18.667 15.2588C18.7468 15.3421 18.8638 15.3886 18.9922 15.3887H23.4365C23.565 15.3887 23.6949 15.3421 23.7969 15.2588L24.3408 14.8145C24.553 14.6409 24.59 14.3591 24.4238 14.1855L23.998 13.7412C23.9182 13.658 23.8012 13.6113 23.6729 13.6113H19.2285ZM6.94531 7.78125C6.74867 7.57611 6.36397 7.62346 6.25977 7.90723C6.21601 8.02649 6.18487 8.15038 6.16797 8.27734L5.51465 13.1914C5.4895 13.3811 5.51148 13.6022 5.56055 13.8018C5.59969 13.9608 5.75879 14.0557 5.94238 14.0557H6.65332C6.7816 14.0556 6.91085 14.0089 7.0127 13.9258L7.23828 13.7412C7.34024 13.6579 7.40621 13.5446 7.42188 13.4268L7.99805 9.09082C8.01369 8.97309 7.97803 8.85969 7.89844 8.77637L6.94531 7.78125ZM17.7246 6.89258C17.528 6.68724 17.1432 6.73461 17.0391 7.01855C16.9953 7.13787 16.9642 7.26165 16.9473 7.38867L16.1758 13.1914C16.1506 13.3811 16.1726 13.6022 16.2217 13.8018C16.2608 13.9608 16.4199 14.0557 16.6035 14.0557H17.3145C17.4427 14.0556 17.572 14.0089 17.6738 13.9258L17.8994 13.7412C18.0014 13.6579 18.0673 13.5446 18.083 13.4268L18.7773 8.20117C18.7929 8.08339 18.7575 7.97001 18.6777 7.88672L17.7246 6.89258ZM8.34277 6.5C8.20424 6.5 8.06713 6.51346 7.93359 6.53906C7.6159 6.6 7.51823 6.94699 7.71484 7.15234L8.66699 8.14746C8.74679 8.2308 8.86368 8.27733 8.99219 8.27734H13.9736C14.1674 8.27734 14.357 8.17206 14.4551 8.00879L15.2373 6.70508C15.2947 6.60932 15.2405 6.50008 15.127 6.5H8.34277Z"
              fill="black"
            />
          </svg>

          {recentServers && (
            <>
              <h2 className={styles.heroSectionTitle}>Recent servers</h2>
              <div className={styles.serverList}>
                {recentServers.map((server) => (
                  <button
                    onClick={() => joinServer(server.slug)}
                    key={server.slug}
                  >
                    <p>{server.name}</p>
                    <p>{server.description}</p>
                  </button>
                ))}
              </div>
            </>
          )}

          <h2 className={styles.heroSectionTitle}>Join a new server</h2>
          <form
            className={`${styles.heroInputForm} ${serverJoinError ? styles.invalid : ""}`.trim()}
            onSubmit={(e) => {
              e.preventDefault();
              joinServer(joinServerId);
            }}
          >
            <input
              type="text"
              placeholder="Server ID"
              value={joinServerId}
              onInput={(e) =>
                setJoinServerId((e.target as HTMLInputElement).value)
              }
            />
            <button
              type="submit"
              disabled={joinServerId.length == 0 || isJoining}
            >
              {isJoining ? (
                <div className="loader">
                  <div />
                  <div />
                  <div />
                </div>
              ) : (
                "Join"
              )}
            </button>
          </form>

          {serverJoinError && (
            <p className={styles.serverJoinError}>{serverJoinError}</p>
          )}

          <div className={styles.divider}></div>

          <div className={styles.flex}>
            <button
              className={styles.userProfile}
              onClick={() => {
                setNewUsername(userObject.username);
                setNewAvatarURL(userObject.avatar);
                setChangingUser(true);
              }}
            >
              {/*<div className={styles.avatar}></div>*/}
              <div
                style={{ "--src": `url("${userObject.avatar}")` }}
                className={styles.avatar}
              />
              <span>{userObject.username}</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 16 16"
                width="16"
                height="16"
              >
                <path d="M11.013 1.427a1.75 1.75 0 0 1 2.474 0l1.086 1.086a1.75 1.75 0 0 1 0 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 0 1-.927-.928l.929-3.25c.081-.286.235-.547.445-.758l8.61-8.61Zm.176 4.823L9.75 4.81l-6.286 6.287a.253.253 0 0 0-.064.108l-.558 1.953 1.953-.558a.253.253 0 0 0 .108-.064Zm1.238-3.763a.25.25 0 0 0-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 0 0 0-.354Z"></path>
              </svg>
            </button>

            <div className={styles.spacer}></div>

            <p className={styles.version}>{version}</p>
          </div>
        </div>
      </div>
    </TooltipProvider>
  );
}

export default App;
